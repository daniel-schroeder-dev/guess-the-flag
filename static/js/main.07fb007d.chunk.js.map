{"version":3,"sources":["components/RadioButtons/RadioButtons.js","components/ResultMessage/ResultMessage.js","components/GameSubmitButton/GameSubmitButton.js","components/PlayAgainButton/PlayAgainButton.js","App.js","serviceWorker.js","index.js"],"names":["RadioButtons","props","className","flags","map","flag","i","key","name","htmlFor","type","id","value","width","height","viewBox","cx","cy","r","d","ResultMessage","result","guess","answerFlag","GameSubmitButton","PlayAgainButton","onClick","App","state","isGuessing","userGuess","handleUserGuess","e","preventDefault","FormData","target","get","setState","handleResetGame","fetchAndSetFlags","maxNum","numRandNums","randNums","randNum","Math","floor","random","includes","push","fetch","then","res","json","randomFlags","getRandomNumbers","getRandomFlags","catch","err","console","error","this","length","src","alt","onSubmit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.07fb007d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './RadioButtons.css';\n\nfunction RadioButtons(props) {\n  return (\n    <div className=\"radio-buttons\">\n\n      {props.flags.map((flag, i) => (\n\n        <label key={flag.name} htmlFor={`\"rdo-${i}\"`} className=\"btn-radio\">\n          <input type=\"radio\" id={`\"rdo-${i}\"`} name=\"flags\" value={flag.name} />\n          <svg width=\"20px\" height=\"20px\" viewBox=\"0 0 20 20\">\n            <circle cx=\"10\" cy=\"10\" r=\"9\"></circle>\n            <path d=\"M10,7 C8.34314575,7 7,8.34314575 7,10 C7,11.6568542 8.34314575,13 10,13 C11.6568542,13 13,11.6568542 13,10 C13,8.34314575 11.6568542,7 10,7 Z\" className=\"inner\"></path>\n            <path d=\"M10,1 L10,1 L10,1 C14.9705627,1 19,5.02943725 19,10 L19,10 L19,10 C19,14.9705627 14.9705627,19 10,19 L10,19 L10,19 C5.02943725,19 1,14.9705627 1,10 L1,10 L1,10 C1,5.02943725 5.02943725,1 10,1 L10,1 Z\" className=\"outer\"></path>\n          </svg>\n          <span className=\"radio-buttons__option-name\">{flag.name}</span>\n        </label>\n\n      ))}\n        \n    </div>\n  );\n}\n\nRadioButtons.propTypes = {\n  flags: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default RadioButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ResultMessage.css';\n\nfunction ResultMessage(props) {\n  return (\n    <div className=\"result-message\">\n      {props.result.result ? <p>Congratulations, {props.result.guess} is correct!</p> : <p>Sorry, {props.result.guess} is incorrect. The correct answer is {props.answerFlag.name}.</p>}\n    </div>\n  );\n}\n\nResultMessage.propTypes = {\n  result: PropTypes.object.isRequired,\n  answerFlag: PropTypes.object.isRequired,\n};\n\nexport default ResultMessage;","import React from 'react';\nimport './GameSubmitButton.css';\n\nfunction GameSubmitButton(props) {\n  return (\n    <button className=\"game-submit-button\" type=\"submit\">Guess</button>\n  );\n}\n\nexport default GameSubmitButton;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PlayAgainButton.css';\n\nfunction PlayAgainButton(props) {\n  return (\n    <button className=\"play-again-button\" type=\"button\" onClick={props.onClick}>Play Again?</button>\n  );\n}\n\nPlayAgainButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default PlayAgainButton;","import React from 'react';\n\nimport RadioButtons from './components/RadioButtons/RadioButtons';\nimport ResultMessage from './components/ResultMessage/ResultMessage';\nimport GameSubmitButton from './components/GameSubmitButton/GameSubmitButton';\nimport PlayAgainButton from './components/PlayAgainButton/PlayAgainButton';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    flags: [],\n    answerFlag: {},\n    isGuessing: true,\n    result: {\n      result: null,\n      userGuess: null,\n    },\n  };\n\n  getRandomNumbers(maxNum, numRandNums) {\n\n    const randNums = [];\n\n    for (let i = 0; i < numRandNums; i++) {\n      let randNum = Math.floor(Math.random() * maxNum);\n      if (randNums.includes(randNum)) {\n        --i;\n        continue;\n      }\n      randNums.push(randNum);\n    }\n\n    return randNums;\n\n  }\n\n  fetchAndSetFlags() {\n    \n    const TOTAL_NUM_FLAGS = 250;\n    const NUM_RAND_FLAGS = 4;\n    \n    const apiUrl = 'https://restcountries.eu/rest/v2/all?fields=name;flag;';\n\n    const getRandomFlags = flags => {\n      const randNums = this.getRandomNumbers(TOTAL_NUM_FLAGS, NUM_RAND_FLAGS);\n      return [flags[randNums[0]], flags[randNums[1]], flags[randNums[2]], flags[randNums[3]]];\n    };\n\n    fetch(apiUrl)\n      .then(res => res.json())\n      .then(flags => {\n        const randomFlags = getRandomFlags(flags);\n        this.setState(state => {\n          const answerFlag = randomFlags[Math.floor(Math.random() * NUM_RAND_FLAGS)];\n          return {\n            flags: randomFlags,\n            answerFlag,\n          };\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  componentDidMount() {\n    this.fetchAndSetFlags();\n  }\n\n  handleUserGuess = e => {\n    e.preventDefault();\n    var data = new FormData(e.target);\n    const userGuess = data.get('flags');\n    if (!userGuess) return;\n    this.setState(state => {\n      return {\n        isGuessing: false,\n        result: {\n          result: userGuess === state.answerFlag.name,\n          guess: userGuess,\n        },\n      };\n    });\n  };\n\n  handleResetGame = () => {\n    this.setState(state => {\n      return {\n        isGuessing: true,\n        result: {\n          result: null,\n          guess: null,\n        },\n        flags: [],\n      };\n    });\n    this.fetchAndSetFlags();\n  };\n\n  render() {\n    return (\n      <main className=\"app\">\n        <h1 className=\"app__title\">Guess The Flag!</h1>\n        <figure className=\"app__flag-img-wrapper\">\n          {this.state.flags.length ? <img className=\"app__flag-img\" src={this.state.answerFlag.flag} alt={`The flag of ${this.state.answerFlag.name}`} /> : 'Loading...'}\n        </figure>\n        <form className=\"app__guess-flag-form\" onSubmit={this.handleUserGuess}>\n          {this.state.isGuessing ? <RadioButtons flags={this.state.flags} /> : <ResultMessage result={this.state.result} answerFlag={this.state.answerFlag} />}\n          {this.state.isGuessing ? <GameSubmitButton /> : <PlayAgainButton onClick={this.handleResetGame} />}\n        </form>\n      </main>\n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}